package io.github.tscholze.kotlog.templates.images

import io.github.tscholze.kotlog.models.PostConfiguration
import java.awt.Color
import java.awt.Font
import java.awt.FontMetrics
import java.awt.image.BufferedImage
import java.io.ByteArrayInputStream
import java.io.File
import java.util.*
import javax.imageio.ImageIO


class SocialMediaPreviewImage {

    companion object {
        // MARK: - Private properties -

        private val BACKGROUND_IMAGE: BufferedImage = ImageIO.read(
            ByteArrayInputStream(
                Base64.getDecoder().decode(
                    ""
                        .toByteArray()
                )
            )
        )

        private const val WIDTH = 1280
        private const val HEIGHT = 640
        private const val MAX_ABSTRACT_ROW_WIDTH = 1000

        private val TITLE_FONT = Font("Baskerville", 1, 72)
        private val TITLE_COLOR = Color.BLACK!!

        private val ABSTRACT_FONT = Font("Helvetica Neue", 3, 42)
        private val ABSTRACT_COLOR = Color.LIGHT_GRAY!!

        // MARK: - Internal helper methods -

        /**
         * Generates a preview image from given post configuration
         *
         * @param postConfiguration Given configuration
         * @param outputDirectoryName Output directy name
         */
        fun generate(postConfiguration: PostConfiguration, outputDirectoryName: String) {

            // Create canvas
            val image = BufferedImage(
                WIDTH,
                HEIGHT,
                BufferedImage.TYPE_INT_ARGB
            )

            // Create image with background
            val graphics = image.createGraphics()
            graphics.drawImage(BACKGROUND_IMAGE, 0, 0, null)

            // Add title
            graphics.font = TITLE_FONT
            graphics.color = TITLE_COLOR
            val titleLines = wrap(postConfiguration.title, graphics.fontMetrics).take(2)
            for ((index, value) in titleLines.withIndex()) {
                graphics.drawString(value, 100, 140 + (index * 88))
            }

            // Add abstract
            graphics.font = ABSTRACT_FONT
            graphics.color = ABSTRACT_COLOR
            val abstractLines = wrap(postConfiguration.abstract, graphics.fontMetrics).take(3)
            for ((index, value) in abstractLines.withIndex()) {
                graphics.drawString(value, 100, 140 + (index * 60) + (titleLines.count() * 88))
            }

            // Write file
            ImageIO.write(image, "PNG", File(File("./$outputDirectoryName"), "${postConfiguration.filename}.png"))
        }

        // MARK: - Private helper -

        /**
         * Based on:
         * https://stackoverflow.com/questions/12129633/how-do-i-render-wrapped-text-on-an-image-in-java
         */
        private fun wrap(txt: String, fm: FontMetrics): List<String> {
            val st = StringTokenizer(txt)
            val list: MutableList<String> = ArrayList()
            var line = ""
            var lineBeforeAppend = ""
            while (st.hasMoreTokens()) {
                val seg = st.nextToken()
                lineBeforeAppend = line
                line += "$seg "
                val width = fm.stringWidth(line)
                line = if (width < MAX_ABSTRACT_ROW_WIDTH) {
                    continue
                } else { //new Line.
                    list.add(lineBeforeAppend)
                    "$seg "
                }
            }
            //the remaining part.
            if (line.isNotEmpty()) {
                list.add(line)
            }
            return list
        }
    }
}


